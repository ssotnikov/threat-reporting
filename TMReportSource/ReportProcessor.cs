using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace TMReportSource
{
	public class ReportProcessor
	{

		private static XNamespace nsKB = "http://schemas.datacontract.org/2004/07/ThreatModeling.KnowledgeBase";

		private static XNamespace nsM = "http://schemas.datacontract.org/2004/07/ThreatModeling.Model";

		public static Model GetReport(string fileName)
		{
			XDocument xdoc = XDocument.Load(fileName);

			var model = new Model
			{
				Threats = getThreats(xdoc),
				Notes = getNotes(xdoc),
				MetaInformation = getMetaInformation(xdoc)
			};

			return model;
		}

		private static List<MetaInformation> getMetaInformation(XDocument xdoc)
		{
			var list = new List<MetaInformation>();

			var xMI = xdoc.Document.Descendants(nsM + "MetaInformation").FirstOrDefault();

			var mi = new MetaInformation
			{
				Assumptions = xMI.Element(nsM + "Assumptions").Value,
				Contributors = xMI.Element(nsM + "Contributors").Value,
				ExternalDependencies = xMI.Element(nsM + "ExternalDependencies").Value,
				HighLevelSystemDescription = xMI.Element(nsM + "HighLevelSystemDescription").Value,
				Owner = xMI.Element(nsM + "Owner").Value,
				Reviewer = xMI.Element(nsM + "Reviewer").Value,
				ThreatModelName = xMI.Element(nsM + "ThreatModelName").Value
			};

			list.Add(mi);

			return list;
		}

		private static List<Note> getNotes(XDocument xdoc)
		{

			var list = new List<Note>();

			var xNotes = xdoc.Document.Descendants(nsM + "Note").ToList();

			foreach (XElement xNote in xNotes)
			{
				var note = new Note
				{
					Id = int.Parse(xNote.Element(nsM + "Id").Value),

					AddedBy = xNote.Element(nsM + "AddedBy").Value,

					Date = DateTime.Parse(xNote.Element(nsM + "Date").Value),

					Message = xNote.Element(nsM + "Message").Value
				};

				list.Add(note);
			}
			return list;
		}

		private static List<Threat> getThreats(XDocument xdoc)
		{

			XNamespace nsA = "http://schemas.microsoft.com/2003/10/Serialization/Arrays";

			var list = new List<Threat>();

			var xThreats = xdoc.Document.Descendants(nsA + "KeyValueOfstringThreatpc_P0_PhOB").ToList();

			foreach (XElement xThreat in xThreats)
			{
				var key = xThreat.Element(nsA + "Key").Value;

				var value = xThreat.Element(nsA + "Value");

				var threat = new Threat
				{
					Id = int.Parse(value.Element(nsKB + "Id").Value),

					Priority = value.Element(nsKB + "Priority").Value,

					ChangedBy = value.Element(nsKB + "ChangedBy").Value,

					ModifiedAt = DateTime.Parse(value.Element(nsKB + "ModifiedAt").Value),

					State = value.Element(nsKB + "State").Value == "AutoGenerated" ? "Not Started" : value.Element(nsKB + "State").Value,
				};

				var xProperties = value.Descendants(nsKB + "Properties").ToList();

				foreach (XElement xProperty in xProperties.Elements(nsA + "KeyValueOfstringstring"))
				{

					if (xProperty.Element(nsA + "Key").Value == "Title")
					{
						threat.Title = xProperty.Element(nsA + "Value").Value;
					}
					else if (xProperty.Element(nsA + "Key").Value == "UserThreatDescription")
					{
						threat.Description = xProperty.Element(nsA + "Value").Value;
					}
					else if (xProperty.Element(nsA + "Key").Value == "UserThreatShortDescription")
					{
						threat.ShortDescription = xProperty.Element(nsA + "Value").Value;
					}
					else if (xProperty.Element(nsA + "Key").Value == "UserThreatCategory")
					{
						threat.Category = xProperty.Element(nsA + "Value").Value;
					}
					else if (xProperty.Element(nsA + "Key").Value == "InteractionString")
					{
						threat.Interaction = xProperty.Element(nsA + "Value").Value;
					}
					else if (xProperty.Element(nsA + "Key").Value == "StateInformation")
					{
						threat.Justification = xProperty.Element(nsA + "Value").Value;
					}
					else if (xProperty.Element(nsA + "Key").Value == "SDLPhase")
					{
						threat.SDLPhase = xProperty.Element(nsA + "Value").Value;
					}
					else if (xProperty.Element(nsA + "Key").Value == "PossibleMitigations")
					{
						threat.PossibleMitigations = xProperty.Element(nsA + "Value").Value;
					}
					else if (TryParseGuid(xProperty.Element(nsA + "Key").Value, out Guid key1))
					{

						var customPropName = getCustomPropertyName(xdoc, key1.ToString());

						if (customPropName == "Data Asset")
						{

							threat.DataAsset = xProperty.Element(nsA + "Value").Value;

						}

						if (customPropName == "Actors")
						{

							threat.Actor = xProperty.Element(nsA + "Value").Value;

						}

						if (customPropName == "Issue references")
						{

							threat.IssueReferences = xProperty.Element(nsA + "Value").Value;

						}
					}
				}

				list.Add(threat);

			}

			return list.OrderBy(i => i.Id).ToList();
		}

		private static string getCustomPropertyName(XDocument xdoc, string guid)
		{
			var name = xdoc.Document.Descendants(nsM + "ThreatMetaDatum")
				.Where(e => e.Element(nsM + "Id").Value == guid)
				.Select(e => e.Element(nsM + "Label").Value)
				.FirstOrDefault();
			return name;
		}

		private static bool TryParseGuid(string guidString, out Guid guid)
		{
			if (guidString == null)
			{
				throw new ArgumentNullException("guidString");
			}

			try
			{
				guid = new Guid(guidString);
				return true;
			}
			catch (FormatException)
			{
				guid = default(Guid);
				return false;
			}
		}
	}
}
